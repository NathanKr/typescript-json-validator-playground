/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
import IPerson from './IPerson';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {IPerson};
export const IPersonSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "IPet": {
      "defaultProperties": [
      ],
      "properties": {
        "legs": {
          "maximum": 100,
          "minimum": 1,
          "type": "number"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "legs",
        "name"
      ],
      "type": "object"
    }
  },
  "properties": {
    "age": {
      "type": "number"
    },
    "name": {
      "type": "string"
    },
    "pets": {
      "items": {
        "$ref": "#/definitions/IPet"
      },
      "type": "array"
    }
  },
  "required": [
    "name",
    "pets"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isIPerson = ajv.compile(IPersonSchema) as ValidateFunction<IPerson>;
export default function validate(value: unknown): IPerson {
  if (isIPerson(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isIPerson.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'IPerson'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
